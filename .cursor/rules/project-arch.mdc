---
description: 
globs: 
alwaysApply: true
---
## Project Architecture and Conventions

This document outlines the core architecture, folder structure, and development conventions for the Bedaya Next.js application.

### Directory Structure
```
src/
├── app/                 # App Router pages, layouts & Next.js API routes
│   ├── (auth)/          # Public/auth pages (login, register)
│   ├── (main)/          # Protected routes
│   ├── api/             # Next.js backend handlers
│   ├── layout.tsx       # Root layout
│   └── page.tsx         # Homepage
├── types/               # TypeScript interfaces
├── models/              # Mongoose schemas
├── services/            # Business logic (backend)
├── clients/             # Frontend API callers
├── components/          # Reusable React components
├── lib/                 # Utilities (e.g., db connection)
├── providers/           # React context providers
├── auth.ts              # NextAuth.js config
└── middleware.ts        # Route protection
```

### Core Layers

- **Types**: Data shapes (interfaces) in `src/types`
- **Models**: Database schemas referencing types in `src/models`
- **Services**: Backend business logic in `src/services`
- **Clients**: Frontend API calls in `src/clients`
- **API Routes**: HTTP handlers in `src/app/api`
- **Components**: UI elements in `src/components`
- **Providers**: Context setup in `src/providers`

### Key Conventions

1. **Separation of Concerns**: Keep layers focused (types → models → services → API → clients → UI).
2. **API Calls**: Centralize in `clients/` using fetch helpers (e.g., `fetchJson`).
3. **Error Handling**:
   - Services throw domain-specific errors.
   - API routes catch errors and respond with appropriate status codes.
   - Clients handle HTTP errors and propagate to UI.
4. **Authentication**:
   - Configured via `auth.ts` and NextAuth API route.
   - Provider in `providers/AuthProvider.tsx`.
   - Middleware secures protected routes.
5. **Styling**:
   - Ant Design components + custom Tailwind in `globals.css`.
6. **Performance**:
   - Prefer server components where possible.
   - Use client layer for selective data formatting and caching.

### Adding Features
1. Add types in `src/types`.
2. Create model in `src/models`.
3. Implement logic in `src/services`.
4. Expose calls in `src/clients`.
5. Add route in `src/app/api`.
6. Add UI in `src/app` or `src/components`.

